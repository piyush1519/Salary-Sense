{"ast":null,"code":"// src/error.ts\nfunction isUnauthorizedError(e) {\n  const status = e?.status;\n  const code = e?.errors?.[0]?.code;\n  return code === \"authentication_invalid\" && status === 401;\n}\nfunction isCaptchaError(e) {\n  return [\"captcha_invalid\", \"captcha_not_enabled\", \"captcha_missing_token\"].includes(e.errors[0].code);\n}\nfunction is4xxError(e) {\n  const status = e?.status;\n  return !!status && status >= 400 && status < 500;\n}\nfunction isNetworkError(e) {\n  const message = (`${e.message}${e.name}` || \"\").toLowerCase().replace(/\\s+/g, \"\");\n  return message.includes(\"networkerror\");\n}\nfunction isKnownError(error) {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\nfunction isClerkAPIResponseError(err) {\n  return \"clerkError\" in err;\n}\nfunction isClerkRuntimeError(err) {\n  return \"clerkRuntimeError\" in err;\n}\nfunction isReverificationCancelledError(err) {\n  return isClerkRuntimeError(err) && err.code === \"reverification_cancelled\";\n}\nfunction isMetamaskError(err) {\n  return \"code\" in err && [4001, 32602, 32603].includes(err.code) && \"message\" in err;\n}\nfunction isUserLockedError(err) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === \"user_locked\";\n}\nfunction isPasswordPwnedError(err) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === \"form_password_pwned\";\n}\nfunction parseErrors(data = []) {\n  return data.length > 0 ? data.map(parseError) : [];\n}\nfunction parseError(error) {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id,\n      emailAddresses: error?.meta?.email_addresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n      plan: error?.meta?.plan,\n      isPlanUpgradePossible: error?.meta?.is_plan_upgrade_possible\n    }\n  };\n}\nfunction errorToJSON(error) {\n  return {\n    code: error?.code || \"\",\n    message: error?.message || \"\",\n    long_message: error?.longMessage,\n    meta: {\n      param_name: error?.meta?.paramName,\n      session_id: error?.meta?.sessionId,\n      email_addresses: error?.meta?.emailAddresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n      plan: error?.meta?.plan,\n      is_plan_upgrade_possible: error?.meta?.isPlanUpgradePossible\n    }\n  };\n}\nvar ClerkAPIResponseError = class _ClerkAPIResponseError extends Error {\n  constructor(message, {\n    data,\n    status,\n    clerkTraceId,\n    retryAfter\n  }) {\n    super(message);\n    this.toString = () => {\n      let message = `[${this.name}]\nMessage:${this.message}\nStatus:${this.status}\nSerialized errors: ${this.errors.map(e => JSON.stringify(e))}`;\n      if (this.clerkTraceId) {\n        message += `\nClerk Trace ID: ${this.clerkTraceId}`;\n      }\n      return message;\n    };\n    Object.setPrototypeOf(this, _ClerkAPIResponseError.prototype);\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.retryAfter = retryAfter;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n};\nvar ClerkRuntimeError = class _ClerkRuntimeError extends Error {\n  constructor(message, {\n    code\n  }) {\n    const prefix = \"\\u{1F512} Clerk:\";\n    const regex = new RegExp(prefix.replace(\" \", \"\\\\s*\"), \"i\");\n    const sanitized = message.replace(regex, \"\");\n    const _message = `${prefix} ${sanitized.trim()}\n\n(code=\"${code}\")\n`;\n    super(_message);\n    /**\n     * Returns a string representation of the error.\n     *\n     * @returns A formatted string with the error name and message.\n     */\n    this.toString = () => {\n      return `[${this.name}]\nMessage:${this.message}`;\n    };\n    Object.setPrototypeOf(this, _ClerkRuntimeError.prototype);\n    this.code = code;\n    this.message = _message;\n    this.clerkRuntimeError = true;\n    this.name = \"ClerkRuntimeError\";\n  }\n};\nvar EmailLinkError = class _EmailLinkError extends Error {\n  constructor(code) {\n    super(code);\n    this.code = code;\n    this.name = \"EmailLinkError\";\n    Object.setPrototypeOf(this, _EmailLinkError.prototype);\n  }\n};\nfunction isEmailLinkError(err) {\n  return err.name === \"EmailLinkError\";\n}\nvar EmailLinkErrorCode = {\n  Expired: \"expired\",\n  Failed: \"failed\",\n  ClientMismatch: \"client_mismatch\"\n};\nvar EmailLinkErrorCodeStatus = {\n  Expired: \"expired\",\n  Failed: \"failed\",\n  ClientMismatch: \"client_mismatch\"\n};\nvar DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,\n  InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,\n  MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`\n});\nfunction buildErrorThrower({\n  packageName,\n  customMessages\n}) {\n  let pkg = packageName;\n  function buildMessage(rawMessage, replacements) {\n    if (!replacements) {\n      return `${pkg}: ${rawMessage}`;\n    }\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || \"\").toString();\n      msg = msg.replace(`{{${match[1]}}}`, replacement);\n    }\n    return `${pkg}: ${msg}`;\n  }\n  const messages = {\n    ...DefaultMessages,\n    ...customMessages\n  };\n  return {\n    setPackageName({\n      packageName: packageName2\n    }) {\n      if (typeof packageName2 === \"string\") {\n        pkg = packageName2;\n      }\n      return this;\n    },\n    setMessages({\n      customMessages: customMessages2\n    }) {\n      Object.assign(messages, customMessages2 || {});\n      return this;\n    },\n    throwInvalidPublishableKeyError(params) {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n    throwInvalidProxyUrl(params) {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n    throwMissingPublishableKeyError() {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n    throwMissingSecretKeyError() {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n    throwMissingClerkProviderError(params) {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n    throw(message) {\n      throw new Error(buildMessage(message));\n    }\n  };\n}\nvar ClerkWebAuthnError = class extends ClerkRuntimeError {\n  constructor(message, {\n    code\n  }) {\n    super(message, {\n      code\n    });\n    this.code = code;\n  }\n};\nexport { isUnauthorizedError, isCaptchaError, is4xxError, isNetworkError, isKnownError, isClerkAPIResponseError, isClerkRuntimeError, isReverificationCancelledError, isMetamaskError, isUserLockedError, isPasswordPwnedError, parseErrors, parseError, errorToJSON, ClerkAPIResponseError, ClerkRuntimeError, EmailLinkError, isEmailLinkError, EmailLinkErrorCode, EmailLinkErrorCodeStatus, buildErrorThrower, ClerkWebAuthnError };","map":{"version":3,"names":["isUnauthorizedError","e","status","code","errors","isCaptchaError","includes","is4xxError","isNetworkError","message","name","toLowerCase","replace","isKnownError","error","isClerkAPIResponseError","isMetamaskError","isClerkRuntimeError","err","isReverificationCancelledError","isUserLockedError","isPasswordPwnedError","parseErrors","data","length","map","parseError","longMessage","long_message","meta","paramName","param_name","sessionId","session_id","emailAddresses","email_addresses","identifiers","zxcvbn","plan","isPlanUpgradePossible","is_plan_upgrade_possible","errorToJSON","ClerkAPIResponseError","_ClerkAPIResponseError","Error","constructor","clerkTraceId","retryAfter","toString","JSON","stringify","Object","setPrototypeOf","prototype","clerkError","ClerkRuntimeError","_ClerkRuntimeError","prefix","regex","RegExp","sanitized","_message","trim","clerkRuntimeError","EmailLinkError","_EmailLinkError","isEmailLinkError","EmailLinkErrorCode","Expired","Failed","ClientMismatch","EmailLinkErrorCodeStatus","DefaultMessages","freeze","InvalidProxyUrlErrorMessage","InvalidPublishableKeyErrorMessage","MissingPublishableKeyErrorMessage","MissingSecretKeyErrorMessage","MissingClerkProvider","buildErrorThrower","packageName","customMessages","pkg","buildMessage","rawMessage","replacements","msg","matches","matchAll","match","replacement","messages","setPackageName","packageName2","setMessages","customMessages2","assign","throwInvalidPublishableKeyError","params","throwInvalidProxyUrl","throwMissingPublishableKeyError","throwMissingSecretKeyError","throwMissingClerkProviderError","throw","ClerkWebAuthnError"],"sources":["C:\\Users\\Piyush Nimbalkar\\Desktop\\WDL\\salary-sense\\client\\node_modules\\@clerk\\shared\\src\\error.ts"],"sourcesContent":["import type {\n  ClerkAPIError,\n  ClerkAPIErrorJSON,\n  ClerkAPIResponseError as ClerkAPIResponseErrorInterface,\n} from '@clerk/types';\n\n/**\n * Checks if the provided error object is an unauthorized error.\n *\n * @internal\n *\n * @deprecated This is no longer used, and will be removed in the next major version.\n */\nexport function isUnauthorizedError(e: any): boolean {\n  const status = e?.status;\n  const code = e?.errors?.[0]?.code;\n  return code === 'authentication_invalid' && status === 401;\n}\n\n/**\n * Checks if the provided error object is a captcha error.\n *\n * @internal\n */\nexport function isCaptchaError(e: ClerkAPIResponseError): boolean {\n  return ['captcha_invalid', 'captcha_not_enabled', 'captcha_missing_token'].includes(e.errors[0].code);\n}\n\n/**\n * Checks if the provided error is a 4xx error.\n *\n * @internal\n */\nexport function is4xxError(e: any): boolean {\n  const status = e?.status;\n  return !!status && status >= 400 && status < 500;\n}\n\n/**\n * Checks if the provided error is a network error.\n *\n * @internal\n */\nexport function isNetworkError(e: any): boolean {\n  // TODO: revise during error handling epic\n  const message = (`${e.message}${e.name}` || '').toLowerCase().replace(/\\s+/g, '');\n  return message.includes('networkerror');\n}\n\n/**\n * Options for creating a ClerkAPIResponseError.\n *\n * @internal\n */\ninterface ClerkAPIResponseOptions {\n  data: ClerkAPIErrorJSON[];\n  status: number;\n  clerkTraceId?: string;\n  retryAfter?: number;\n}\n\n// For a comprehensive Metamask error list, please see\n// https://docs.metamask.io/guide/ethereum-provider.html#errors\nexport interface MetamaskError extends Error {\n  code: 4001 | 32602 | 32603;\n  message: string;\n  data?: unknown;\n}\n\n/**\n * Checks if the provided error is either a ClerkAPIResponseError, a ClerkRuntimeError, or a MetamaskError.\n *\n * @internal\n */\nexport function isKnownError(error: any): error is ClerkAPIResponseError | ClerkRuntimeError | MetamaskError {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\n\n/**\n * Checks if the provided error is a ClerkAPIResponseError.\n *\n * @internal\n */\nexport function isClerkAPIResponseError(err: any): err is ClerkAPIResponseError {\n  return 'clerkError' in err;\n}\n\n/**\n * Checks if the provided error object is an instance of ClerkRuntimeError.\n *\n * @param err - The error object to check.\n * @returns True if the error is a ClerkRuntimeError, false otherwise.\n *\n * @example\n * const error = new ClerkRuntimeError('An error occurred');\n * if (isClerkRuntimeError(error)) {\n *   // Handle ClerkRuntimeError\n *   console.error('ClerkRuntimeError:', error.message);\n * } else {\n *   // Handle other errors\n *   console.error('Other error:', error.message);\n * }\n */\nexport function isClerkRuntimeError(err: any): err is ClerkRuntimeError {\n  return 'clerkRuntimeError' in err;\n}\n\n/**\n * Checks if the provided error is a Clerk runtime error indicating a reverification was cancelled.\n *\n * @internal\n */\nexport function isReverificationCancelledError(err: any) {\n  return isClerkRuntimeError(err) && err.code === 'reverification_cancelled';\n}\n\n/**\n * Checks if the provided error is a Metamask error.\n *\n * @internal\n */\nexport function isMetamaskError(err: any): err is MetamaskError {\n  return 'code' in err && [4001, 32602, 32603].includes(err.code) && 'message' in err;\n}\n\n/**\n * Checks if the provided error is clerk api response error indicating a user is locked.\n *\n * @internal\n */\nexport function isUserLockedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'user_locked';\n}\n\n/**\n * Checks if the provided error is a clerk api response error indicating a password was pwned.\n *\n * @internal\n */\nexport function isPasswordPwnedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'form_password_pwned';\n}\n\n/**\n * Parses an array of ClerkAPIErrorJSON objects into an array of ClerkAPIError objects.\n *\n * @internal\n */\nexport function parseErrors(data: ClerkAPIErrorJSON[] = []): ClerkAPIError[] {\n  return data.length > 0 ? data.map(parseError) : [];\n}\n\n/**\n * Parses a ClerkAPIErrorJSON object into a ClerkAPIError object.\n *\n * @internal\n */\nexport function parseError(error: ClerkAPIErrorJSON): ClerkAPIError {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id,\n      emailAddresses: error?.meta?.email_addresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n      plan: error?.meta?.plan,\n      isPlanUpgradePossible: error?.meta?.is_plan_upgrade_possible,\n    },\n  };\n}\n\n/**\n * Converts a ClerkAPIError object into a ClerkAPIErrorJSON object.\n *\n * @internal\n */\nexport function errorToJSON(error: ClerkAPIError | null): ClerkAPIErrorJSON {\n  return {\n    code: error?.code || '',\n    message: error?.message || '',\n    long_message: error?.longMessage,\n    meta: {\n      param_name: error?.meta?.paramName,\n      session_id: error?.meta?.sessionId,\n      email_addresses: error?.meta?.emailAddresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n      plan: error?.meta?.plan,\n      is_plan_upgrade_possible: error?.meta?.isPlanUpgradePossible,\n    },\n  };\n}\n\nexport class ClerkAPIResponseError extends Error implements ClerkAPIResponseErrorInterface {\n  clerkError: true;\n\n  status: number;\n  message: string;\n  clerkTraceId?: string;\n  retryAfter?: number;\n\n  errors: ClerkAPIError[];\n\n  constructor(message: string, { data, status, clerkTraceId, retryAfter }: ClerkAPIResponseOptions) {\n    super(message);\n\n    Object.setPrototypeOf(this, ClerkAPIResponseError.prototype);\n\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.retryAfter = retryAfter;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n\n  public toString = () => {\n    let message = `[${this.name}]\\nMessage:${this.message}\\nStatus:${this.status}\\nSerialized errors: ${this.errors.map(\n      e => JSON.stringify(e),\n    )}`;\n\n    if (this.clerkTraceId) {\n      message += `\\nClerk Trace ID: ${this.clerkTraceId}`;\n    }\n\n    return message;\n  };\n}\n\n/**\n * Custom error class for representing Clerk runtime errors.\n *\n * @class ClerkRuntimeError\n *\n * @example\n *   throw new ClerkRuntimeError('An error occurred', { code: 'password_invalid' });\n */\nexport class ClerkRuntimeError extends Error {\n  clerkRuntimeError: true;\n\n  /**\n   * The error message.\n   *\n   * @type {string}\n   */\n  message: string;\n\n  /**\n   * A unique code identifying the error, can be used for localization.\n   *\n   * @type {string}\n   */\n  code: string;\n\n  constructor(message: string, { code }: { code: string }) {\n    const prefix = '🔒 Clerk:';\n    const regex = new RegExp(prefix.replace(' ', '\\\\s*'), 'i');\n    const sanitized = message.replace(regex, '');\n    const _message = `${prefix} ${sanitized.trim()}\\n\\n(code=\"${code}\")\\n`;\n    super(_message);\n\n    Object.setPrototypeOf(this, ClerkRuntimeError.prototype);\n\n    this.code = code;\n    this.message = _message;\n    this.clerkRuntimeError = true;\n    this.name = 'ClerkRuntimeError';\n  }\n\n  /**\n   * Returns a string representation of the error.\n   *\n   * @returns A formatted string with the error name and message.\n   */\n  public toString = () => {\n    return `[${this.name}]\\nMessage:${this.message}`;\n  };\n}\n\nexport class EmailLinkError extends Error {\n  code: string;\n\n  constructor(code: string) {\n    super(code);\n    this.code = code;\n    this.name = 'EmailLinkError' as const;\n    Object.setPrototypeOf(this, EmailLinkError.prototype);\n  }\n}\n\n/**\n * Checks if the provided error is an EmailLinkError.\n *\n * @internal\n */\nexport function isEmailLinkError(err: Error): err is EmailLinkError {\n  return err.name === 'EmailLinkError';\n}\n\n/**\n * @deprecated Use `EmailLinkErrorCodeStatus` instead.\n *\n * @hidden\n */\nexport const EmailLinkErrorCode = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n};\n\nexport const EmailLinkErrorCodeStatus = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n} as const;\n\nconst DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,\n  InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,\n  MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`,\n});\n\ntype MessageKeys = keyof typeof DefaultMessages;\n\ntype Messages = Record<MessageKeys, string>;\n\ntype CustomMessages = Partial<Messages>;\n\nexport type ErrorThrowerOptions = {\n  packageName: string;\n  customMessages?: CustomMessages;\n};\n\nexport interface ErrorThrower {\n  setPackageName(options: ErrorThrowerOptions): ErrorThrower;\n\n  setMessages(options: ErrorThrowerOptions): ErrorThrower;\n\n  throwInvalidPublishableKeyError(params: { key?: string }): never;\n\n  throwInvalidProxyUrl(params: { url?: string }): never;\n\n  throwMissingPublishableKeyError(): never;\n\n  throwMissingSecretKeyError(): never;\n\n  throwMissingClerkProviderError(params: { source?: string }): never;\n\n  throw(message: string): never;\n}\n\n/**\n * Builds an error thrower.\n *\n * @internal\n */\nexport function buildErrorThrower({ packageName, customMessages }: ErrorThrowerOptions): ErrorThrower {\n  let pkg = packageName;\n\n  /**\n   * Builds a message from a raw message and replacements.\n   *\n   * @internal\n   */\n  function buildMessage(rawMessage: string, replacements?: Record<string, string | number>) {\n    if (!replacements) {\n      return `${pkg}: ${rawMessage}`;\n    }\n\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || '').toString();\n      msg = msg.replace(`{{${match[1]}}}`, replacement);\n    }\n\n    return `${pkg}: ${msg}`;\n  }\n\n  const messages = {\n    ...DefaultMessages,\n    ...customMessages,\n  };\n\n  return {\n    setPackageName({ packageName }: ErrorThrowerOptions): ErrorThrower {\n      if (typeof packageName === 'string') {\n        pkg = packageName;\n      }\n      return this;\n    },\n\n    setMessages({ customMessages }: ErrorThrowerOptions): ErrorThrower {\n      Object.assign(messages, customMessages || {});\n      return this;\n    },\n\n    throwInvalidPublishableKeyError(params: { key?: string }): never {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n\n    throwInvalidProxyUrl(params: { url?: string }): never {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n\n    throwMissingPublishableKeyError(): never {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n\n    throwMissingSecretKeyError(): never {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n\n    throwMissingClerkProviderError(params: { source?: string }): never {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n\n    throw(message: string): never {\n      throw new Error(buildMessage(message));\n    },\n  };\n}\n\ntype ClerkWebAuthnErrorCode =\n  // Generic\n  | 'passkey_not_supported'\n  | 'passkey_pa_not_supported'\n  | 'passkey_invalid_rpID_or_domain'\n  | 'passkey_already_exists'\n  | 'passkey_operation_aborted'\n  // Retrieval\n  | 'passkey_retrieval_cancelled'\n  | 'passkey_retrieval_failed'\n  // Registration\n  | 'passkey_registration_cancelled'\n  | 'passkey_registration_failed';\n\nexport class ClerkWebAuthnError extends ClerkRuntimeError {\n  /**\n   * A unique code identifying the error, can be used for localization.\n   */\n  code: ClerkWebAuthnErrorCode;\n\n  constructor(message: string, { code }: { code: ClerkWebAuthnErrorCode }) {\n    super(message, { code });\n    this.code = code;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { versionSelector } from \"./chunk-EXVDK5P4.mjs\";\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from \"./chunk-6NDGN2IU.mjs\";\nimport { addClerkPrefix } from \"./chunk-IFTVZ2LQ.mjs\";\nimport { loadScript } from \"./chunk-E3R3SJ7O.mjs\";\nimport { buildErrorThrower } from \"./chunk-35WGBVWP.mjs\";\nimport { createDevOrStagingUrlCache, parsePublishableKey } from \"./chunk-IV7BOO4U.mjs\";\n\n// src/loadClerkJsScript.ts\nvar FAILED_TO_LOAD_ERROR = \"Clerk: Failed to load Clerk\";\nvar {\n  isDevOrStagingUrl\n} = createDevOrStagingUrlCache();\nvar errorThrower = buildErrorThrower({\n  packageName: \"@clerk/shared\"\n});\nfunction setClerkJsLoadingErrorPackageName(packageName) {\n  errorThrower.setPackageName({\n    packageName\n  });\n}\nfunction isClerkProperlyLoaded() {\n  if (typeof window === \"undefined\" || !window.Clerk) {\n    return false;\n  }\n  const clerk = window.Clerk;\n  return typeof clerk === \"object\" && typeof clerk.load === \"function\";\n}\nfunction waitForClerkWithTimeout(timeoutMs) {\n  return new Promise((resolve, reject) => {\n    let resolved = false;\n    const cleanup = (timeoutId2, pollInterval2) => {\n      clearTimeout(timeoutId2);\n      clearInterval(pollInterval2);\n    };\n    const checkAndResolve = () => {\n      if (resolved) return;\n      if (isClerkProperlyLoaded()) {\n        resolved = true;\n        cleanup(timeoutId, pollInterval);\n        resolve(null);\n      }\n    };\n    const handleTimeout = () => {\n      if (resolved) return;\n      resolved = true;\n      cleanup(timeoutId, pollInterval);\n      if (!isClerkProperlyLoaded()) {\n        reject(new Error(FAILED_TO_LOAD_ERROR));\n      } else {\n        resolve(null);\n      }\n    };\n    const timeoutId = setTimeout(handleTimeout, timeoutMs);\n    checkAndResolve();\n    const pollInterval = setInterval(() => {\n      if (resolved) {\n        clearInterval(pollInterval);\n        return;\n      }\n      checkAndResolve();\n    }, 100);\n  });\n}\nvar loadClerkJsScript = async opts => {\n  const timeout = opts?.scriptLoadTimeout ?? 15e3;\n  if (isClerkProperlyLoaded()) {\n    return null;\n  }\n  const existingScript = document.querySelector(\"script[data-clerk-js-script]\");\n  if (existingScript) {\n    return waitForClerkWithTimeout(timeout);\n  }\n  if (!opts?.publishableKey) {\n    errorThrower.throwMissingPublishableKeyError();\n    return null;\n  }\n  const loadPromise = waitForClerkWithTimeout(timeout);\n  loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: \"anonymous\",\n    nonce: opts.nonce,\n    beforeLoad: applyClerkJsScriptAttributes(opts)\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n  return loadPromise;\n};\nvar clerkJsScriptUrl = opts => {\n  const {\n    clerkJSUrl,\n    clerkJSVariant,\n    clerkJSVersion,\n    proxyUrl,\n    domain,\n    publishableKey\n  } = opts;\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n  let scriptHost = \"\";\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, \"\");\n  } else if (domain && !isDevOrStagingUrl(parsePublishableKey(publishableKey)?.frontendApi || \"\")) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = parsePublishableKey(publishableKey)?.frontendApi || \"\";\n  }\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, \"\")}.` : \"\";\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\nvar buildClerkJsScriptAttributes = options => {\n  const obj = {};\n  if (options.publishableKey) {\n    obj[\"data-clerk-publishable-key\"] = options.publishableKey;\n  }\n  if (options.proxyUrl) {\n    obj[\"data-clerk-proxy-url\"] = options.proxyUrl;\n  }\n  if (options.domain) {\n    obj[\"data-clerk-domain\"] = options.domain;\n  }\n  if (options.nonce) {\n    obj.nonce = options.nonce;\n  }\n  return obj;\n};\nvar applyClerkJsScriptAttributes = options => script => {\n  const attributes = buildClerkJsScriptAttributes(options);\n  for (const attribute in attributes) {\n    script.setAttribute(attribute, attributes[attribute]);\n  }\n};\nexport { setClerkJsLoadingErrorPackageName, loadClerkJsScript, clerkJsScriptUrl, buildClerkJsScriptAttributes };","map":{"version":3,"names":["FAILED_TO_LOAD_ERROR","isDevOrStagingUrl","createDevOrStagingUrlCache","errorThrower","buildErrorThrower","packageName","setClerkJsLoadingErrorPackageName","setPackageName","isClerkProperlyLoaded","window","Clerk","clerk","load","waitForClerkWithTimeout","timeoutMs","Promise","resolve","reject","resolved","cleanup","timeoutId2","pollInterval2","clearTimeout","clearInterval","checkAndResolve","timeoutId","pollInterval","handleTimeout","Error","setTimeout","setInterval","loadClerkJsScript","opts","timeout","scriptLoadTimeout","existingScript","document","querySelector","publishableKey","throwMissingPublishableKeyError","loadPromise","loadScript","clerkJsScriptUrl","async","crossOrigin","nonce","beforeLoad","applyClerkJsScriptAttributes","catch","clerkJSUrl","clerkJSVariant","clerkJSVersion","proxyUrl","domain","scriptHost","isValidProxyUrl","proxyUrlToAbsoluteURL","replace","parsePublishableKey","frontendApi","addClerkPrefix","variant","version","versionSelector","buildClerkJsScriptAttributes","options","obj","script","attributes","attribute","setAttribute"],"sources":["C:\\Users\\Piyush Nimbalkar\\Desktop\\WDL\\salary-sense\\client\\node_modules\\@clerk\\shared\\src\\loadClerkJsScript.ts"],"sourcesContent":["import type { ClerkOptions, SDKMetadata, Without } from '@clerk/types';\n\nimport { buildErrorThrower } from './error';\nimport { createDevOrStagingUrlCache, parsePublishableKey } from './keys';\nimport { loadScript } from './loadScript';\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from './proxy';\nimport { addClerkPrefix } from './url';\nimport { versionSelector } from './versionSelector';\n\nconst FAILED_TO_LOAD_ERROR = 'Clerk: Failed to load Clerk';\n\nconst { isDevOrStagingUrl } = createDevOrStagingUrlCache();\n\nconst errorThrower = buildErrorThrower({ packageName: '@clerk/shared' });\n\n/**\n * Sets the package name for error messages during ClerkJS script loading.\n *\n * @param packageName - The name of the package to use in error messages (e.g., '@clerk/clerk-react').\n * @example\n * ```typescript\n * setClerkJsLoadingErrorPackageName('@clerk/clerk-react');\n * ```\n */\nexport function setClerkJsLoadingErrorPackageName(packageName: string) {\n  errorThrower.setPackageName({ packageName });\n}\n\ntype LoadClerkJsScriptOptions = Without<ClerkOptions, 'isSatellite'> & {\n  publishableKey: string;\n  clerkJSUrl?: string;\n  clerkJSVariant?: 'headless' | '';\n  clerkJSVersion?: string;\n  sdkMetadata?: SDKMetadata;\n  proxyUrl?: string;\n  domain?: string;\n  nonce?: string;\n  /**\n   * Timeout in milliseconds to wait for clerk-js to load before considering it failed.\n   *\n   * @default 15000 (15 seconds)\n   */\n  scriptLoadTimeout?: number;\n};\n\n/**\n * Validates that window.Clerk exists and is properly initialized.\n * This ensures we don't have false positives where the script loads but Clerk is malformed.\n *\n * @returns `true` if window.Clerk exists and has the expected structure with a load method.\n */\nfunction isClerkProperlyLoaded(): boolean {\n  if (typeof window === 'undefined' || !(window as any).Clerk) {\n    return false;\n  }\n\n  // Basic validation that window.Clerk has the expected structure\n  const clerk = (window as any).Clerk;\n  return typeof clerk === 'object' && typeof clerk.load === 'function';\n}\n\n/**\n * Waits for Clerk to be properly loaded with a timeout mechanism.\n * Uses polling to check if Clerk becomes available within the specified timeout.\n *\n * @param timeoutMs - Maximum time to wait in milliseconds.\n * @returns Promise that resolves with null if Clerk loads successfully, or rejects with an error if timeout is reached.\n */\nfunction waitForClerkWithTimeout(timeoutMs: number): Promise<HTMLScriptElement | null> {\n  return new Promise((resolve, reject) => {\n    let resolved = false;\n\n    const cleanup = (timeoutId: ReturnType<typeof setTimeout>, pollInterval: ReturnType<typeof setInterval>) => {\n      clearTimeout(timeoutId);\n      clearInterval(pollInterval);\n    };\n\n    const checkAndResolve = () => {\n      if (resolved) return;\n\n      if (isClerkProperlyLoaded()) {\n        resolved = true;\n        cleanup(timeoutId, pollInterval);\n        resolve(null);\n      }\n    };\n\n    const handleTimeout = () => {\n      if (resolved) return;\n\n      resolved = true;\n      cleanup(timeoutId, pollInterval);\n\n      if (!isClerkProperlyLoaded()) {\n        reject(new Error(FAILED_TO_LOAD_ERROR));\n      } else {\n        resolve(null);\n      }\n    };\n\n    const timeoutId = setTimeout(handleTimeout, timeoutMs);\n\n    checkAndResolve();\n\n    const pollInterval = setInterval(() => {\n      if (resolved) {\n        clearInterval(pollInterval);\n        return;\n      }\n      checkAndResolve();\n    }, 100);\n  });\n}\n\n/**\n * Hotloads the Clerk JS script with robust failure detection.\n *\n * Uses a timeout-based approach to ensure absolute certainty about load success/failure.\n * If the script fails to load within the timeout period, or loads but doesn't create\n * a proper Clerk instance, the promise rejects with an error.\n *\n * @param opts - The options used to build the Clerk JS script URL and load the script.\n *               Must include a `publishableKey` if no existing script is found.\n * @returns Promise that resolves with null if Clerk loads successfully, or rejects with an error.\n *\n * @example\n * ```typescript\n * try {\n *   await loadClerkJsScript({ publishableKey: 'pk_test_...' });\n *   console.log('Clerk loaded successfully');\n * } catch (error) {\n *   console.error('Failed to load Clerk:', error.message);\n * }\n * ```\n */\nconst loadClerkJsScript = async (opts?: LoadClerkJsScriptOptions): Promise<HTMLScriptElement | null> => {\n  const timeout = opts?.scriptLoadTimeout ?? 15000;\n\n  if (isClerkProperlyLoaded()) {\n    return null;\n  }\n\n  const existingScript = document.querySelector<HTMLScriptElement>('script[data-clerk-js-script]');\n\n  if (existingScript) {\n    return waitForClerkWithTimeout(timeout);\n  }\n\n  if (!opts?.publishableKey) {\n    errorThrower.throwMissingPublishableKeyError();\n    return null;\n  }\n\n  const loadPromise = waitForClerkWithTimeout(timeout);\n\n  loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: 'anonymous',\n    nonce: opts.nonce,\n    beforeLoad: applyClerkJsScriptAttributes(opts),\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n\n  return loadPromise;\n};\n\n/**\n * Generates a Clerk JS script URL based on the provided options.\n *\n * @param opts - The options to use when building the Clerk JS script URL.\n * @returns The complete URL to the Clerk JS script.\n *\n * @example\n * ```typescript\n * const url = clerkJsScriptUrl({ publishableKey: 'pk_test_...' });\n * // Returns: \"https://example.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js\"\n * ```\n */\nconst clerkJsScriptUrl = (opts: LoadClerkJsScriptOptions) => {\n  const { clerkJSUrl, clerkJSVariant, clerkJSVersion, proxyUrl, domain, publishableKey } = opts;\n\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n\n  let scriptHost = '';\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, '');\n  } else if (domain && !isDevOrStagingUrl(parsePublishableKey(publishableKey)?.frontendApi || '')) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = parsePublishableKey(publishableKey)?.frontendApi || '';\n  }\n\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, '')}.` : '';\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\n\n/**\n * Builds an object of Clerk JS script attributes based on the provided options.\n *\n * @param options - The options containing the values for script attributes.\n * @returns An object containing data attributes to be applied to the script element.\n */\nconst buildClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => {\n  const obj: Record<string, string> = {};\n\n  if (options.publishableKey) {\n    obj['data-clerk-publishable-key'] = options.publishableKey;\n  }\n\n  if (options.proxyUrl) {\n    obj['data-clerk-proxy-url'] = options.proxyUrl;\n  }\n\n  if (options.domain) {\n    obj['data-clerk-domain'] = options.domain;\n  }\n\n  if (options.nonce) {\n    obj.nonce = options.nonce;\n  }\n\n  return obj;\n};\n\n/**\n * Returns a function that applies Clerk JS script attributes to a script element.\n *\n * @param options - The options containing the values for script attributes.\n * @returns A function that accepts a script element and applies the attributes to it.\n */\nconst applyClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => (script: HTMLScriptElement) => {\n  const attributes = buildClerkJsScriptAttributes(options);\n  for (const attribute in attributes) {\n    script.setAttribute(attribute, attributes[attribute]);\n  }\n};\n\nexport { loadClerkJsScript, buildClerkJsScriptAttributes, clerkJsScriptUrl };\nexport type { LoadClerkJsScriptOptions };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}